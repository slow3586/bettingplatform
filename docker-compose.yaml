name: betting_platform
services:
  user-service:
    build: ./userservice
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      user-service-db:
        condition: service_healthy
    environment:
      - spring.datasource.url=jdbc:postgresql://user-service-db:5432/postgres
    ports:
      - "8081:8080"
      - "5006:5005"
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  user-service-db:
    image: postgres:alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./userservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3

  main-service:
    build: ./mainservice
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      main-service-db:
        condition: service_healthy
    ports:
      - "8082:8080"
      - "5007:5005"
    environment:
      - spring.datasource.url=jdbc:postgresql://main-service-db:5432/postgres
      - app.client.user=http://user-service:8080
      - app.main-service.kafka-broker=kafka-broker-0:9091
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  main-service-db:
    image: postgres:alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./mainservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3

  frontend-service:
    build: ./frontendservice
    ports:
      - "8083:8080"
      - "5008:5005"
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  websocket-service:
    build: ./websocketservice
    depends_on:
      user-service:
        condition: service_healthy
      kafka-broker-0:
        condition: service_healthy
      websocket-service-rabbitmq:
        condition: service_healthy
    ports:
      - "8084:8080"
      - "5009:5005"
    environment:
      - spring.rabbitmq.host=websocket-service-rabbitmq
      - app.websocket.kafka-broker=kafka-broker-0:9091
      - app.websocket.rabbit-host=websocket-service-rabbitmq
      - app.client.user=http://user-service:8080
      - app.client.main=http://main-service:8080
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  websocket-service-rabbitmq:
    build:
      dockerfile: ./rabbit.Dockerfile
    ports:
      - "5672:5672"
      - "61613:61613"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 2s
      retries: 20

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka-broker-0:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - kafka-zookeeper
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTER:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTER://kafka-broker-0:9090,PLAINTEXT_HOST1://kafka-broker-0:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: nc -z 127.0.0.1 9091 || exit -1
      interval: 2s
      timeout: 2s
      retries: 20

  kafka-kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka-broker-0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker-0:9090"

  zipkin:
    image: openzipkin/zipkin:3.4
    ports:
      - "9411:9411"

  grafana:
    image: grafana/grafana:10.4.4
    ports:
      - "3000:3000"