name: betting_platform

x-logging: &logging
  #driver: gelf
  #options:
  #  gelf-address: "udp://host.docker.internal:12201"
  driver: "none"
  #driver: "json-file"

x-healthcheck: &healthcheck
  interval: 5s
  timeout: 5s
  retries: 30
  start_period: 5s

x-spring-env: &spring-env
  KAFKA_BROKERS: kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092
  management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
  JAVA_OPTS: -Xms64M -Xmx2048M
  server.tomcat.threads.max: 500
  SECRET_KEY: qweqweqweqweqweqweqweqweqweqweqrqwrqwrtweqtewqtweq

x-kafka-env: &kafka-env
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper-1:2181,kafka-zookeeper-2:2181
  KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
  KAFKA_NUM_PARTITIONS: 12
  KAFKA_DEFAULT_REPLICATION_FACTOR: 3
  KAFKA_HEAP_OPTS: -Xms64M -Xmx2048M
  KAFKA_SESSION_TIMEOUT_MS: 3000
  KAFKA_HEARTBEAT_INTERVAL_MS: 1000

x-kafka-zookeeper-env: &kafka-zookeeper-env
  ZOOKEEPER_CLIENT_PORT: 2181
  ZOOKEEPER_TICK_TIME: 2000
  ZOOKEEPER_PEER_PORT: 2888
  ZOOKEEPER_LEADER_PORT: 3888
  ZOOKEEPER_SERVERS: kafka-zookeeper-1:2888:3888;kafka-zookeeper-2:2888:3888

services:
  nginx:
    image: nginx:1.13
    ports: ["8085:80"]
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'

  user-service-1:
    build: ./userservice
    logging: *logging
    depends_on:
      user-service-db:
        condition: service_healthy
    environment:
      <<: *spring-env
      spring.datasource.url: 'jdbc:postgresql://user-service-db:5432/postgres'
    expose: ["8080"]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-2:
    build: ./userservice
    logging: *logging
    depends_on:
      user-service-db:
        condition: service_healthy
    environment:
      <<: *spring-env
      spring.datasource.url: 'jdbc:postgresql://user-service-db:5432/postgres'
    expose: ["8080"]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-3:
    build: ./userservice
    logging: *logging
    depends_on:
      user-service-db:
        condition: service_healthy
    environment:
      <<: *spring-env
      spring.datasource.url: 'jdbc:postgresql://user-service-db:5432/postgres'
    expose: ["8080"]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-rest-1:
    build: ./userservicerest
    logging: *logging
    environment:
      <<: *spring-env
    ports: [ "8082:8080" ]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-rest-2:
    build: ./userservicerest
    logging: *logging
    environment:
      <<: *spring-env
    expose: [ "8080" ]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-db:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./userservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports: ["5434:5432"]
    command: >
      postgres 
      -c ssl=off
      -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  kafka-zookeeper-1:
    image: confluentinc/cp-zookeeper:7.4.4
    logging: *logging
    environment:
      ZOOKEEPER_SERVER_ID: 1
      <<: *kafka-zookeeper-env
    expose: ["2181", "2888", "3888"]
    healthcheck:
      test: "nc -z 127.0.0.1 2181 || exit 1"
      <<: *healthcheck

  kafka-zookeeper-2:
    image: confluentinc/cp-zookeeper:7.4.4
    logging: *logging
    environment:
      ZOOKEEPER_SERVER_ID: 2
      <<: *kafka-zookeeper-env
    expose: ["2181", "2888", "3888"]
    healthcheck:
      test: "nc -z 127.0.0.1 2181 || exit 1"
      <<: *healthcheck

  kafka-broker-1:
    image: confluentinc/cp-kafka:7.4.4
    logging: *logging
    depends_on:
      kafka-zookeeper-1:
        condition: service_healthy
    expose: ["9091", "9092"]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9091,PLAINTEXT_HOST://kafka-broker-1:9092
      <<: *kafka-env
    healthcheck:
      test: "nc -z 127.0.0.1 9092 || exit 1"
      <<: *healthcheck

  kafka-broker-2:
    image: confluentinc/cp-kafka:7.4.4
    logging: *logging
    depends_on:
      kafka-zookeeper-1:
        condition: service_healthy
    expose: ["9091", "9092"]
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9091,PLAINTEXT_HOST://kafka-broker-2:9092
      <<: *kafka-env
    healthcheck:
      test: "nc -z 127.0.0.1 9092 || exit 1"
      <<: *healthcheck

  kafka-broker-3:
    image: confluentinc/cp-kafka:7.4.4
    logging: *logging
    depends_on:
      kafka-zookeeper-1:
        condition: service_healthy
    expose: ["9091", "9092"]
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9091,PLAINTEXT_HOST://kafka-broker-3:9092
      <<: *kafka-env
    healthcheck:
      test: "nc -z 127.0.0.1 9092 || exit 1"
      <<: *healthcheck

  kafka-init:
    image: confluentinc/cp-kafka:7.4.4
    logging: *logging
    restart: no
    depends_on:
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      set -x
      sleep 1
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic auth.request
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic auth.response
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic auth.request.token
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic auth.request.login
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic order.request
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic order.response
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic user-service.public.auth --config cleanup.policy=compact
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic user-service.public.customer --config cleanup.policy=compact
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic user-service.public.order --config cleanup.policy=compact
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic user-service.public.payment --config cleanup.policy=compact
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic trace
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic bet
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic game
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic price
      kafka-topics --bootstrap-server kafka-broker-1:9092 --create --if-not-exists --topic chat_post
      "

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    logging: *logging
    restart: always
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      kafka-connect-init:
        condition: service_completed_successfully
    ports: ["9000:9000"]
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
      SCHEMAREGISTRY_CONNECT: "http://kafka-schema-registry:8085"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:9000 || exit 1"
      <<: *healthcheck

  kafka-connect:
    build:
      dockerfile: ./kafkaconnect.Dockerfile
    logging: *logging
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-broker-1:9091,kafka-broker-2:9091,kafka-broker-3:9091"
      CONNECT_GROUP_ID: "kafka-connect"
      CONNECT_CONFIG_STORAGE_TOPIC: "kafka-connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "kafka-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "kafka-connect-status"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_HEAP_OPTS: -Xms64M -Xmx1024M
    healthcheck:
      test: "curl --fail --silent localhost:8083 | grep version || exit 1"
      <<: *healthcheck

  kafka-connect-init:
    image: curlimages/curl
    logging: *logging
    restart: no
    depends_on:
      kafka-connect:
        condition: service_healthy
    volumes:
      - ./kafkaconnect-main-service.json:/opt/kafkaconnect-main-service.json
      - ./kafkaconnect-user-service.json:/opt/kafkaconnect-user-service.json
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      set -x
      sleep 5;
      curl --connect-timeout 5 --max-time 10 --retry 5 --retry-delay 0 --retry-max-time 40 -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" http://kafka-connect:8083/connectors/ -d @/opt/kafkaconnect-user-service.json
      " 

  prometheus:
    image: prom/prometheus:v2.53.0
    logging: *logging
    restart: always
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports: ["9090:9090"]
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:9090 || exit 1"
      <<: *healthcheck

  grafana:
    image: grafana/grafana:10.4.4
    logging: *logging
    restart: always
    ports: ["3000:3000"]
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:3000 || exit 1"
      <<: *healthcheck

  zipkin:
    image: openzipkin/zipkin:3.4
    logging: *logging
    restart: always
    ports: ["9411:9411"]
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:9411 || exit 1"
      <<: *healthcheck

  cadvisor:
    image: google/cadvisor:v0.33.0
    logging: *logging
    restart: always
    expose: ["8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:8080 || exit 1"
      <<: *healthcheck