name: betting_platform

x-logging: &logging
  driver: gelf
  options:
    gelf-address: "udp://host.docker.internal:12201"

x-healthcheck: &healthcheck
  interval: 5s
  timeout: 5s
  retries: 20
  start_period: 5s

services:
  router-service:
    build: ./routerservice
    logging: *logging
    depends_on:
      kafka-broker-0:
        condition: service_healthy
    environment:
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - KAFKA_BROKERS=kafka-broker-0:9091
    ports:
      - "8081:8080"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service:
    build: ./userservice
    logging: *logging
    depends_on:
      audit-service:
        condition: service_healthy
      kafka-broker-0:
        condition: service_healthy
      user-service-db:
        condition: service_healthy
    environment:
      - spring.datasource.url=jdbc:postgresql://user-service-db:5432/postgres
      - KAFKA_BROKERS=kafka-broker-0:9091
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
    ports:
      - "8082:8080"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  user-service-db:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./userservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  main-service:
    build: ./mainservice
    logging: *logging
    depends_on:
      audit-service:
        condition: service_healthy
      kafka-broker-0:
        condition: service_healthy
      main-service-db:
        condition: service_healthy
    ports:
      - "8083:8080"
    environment:
      - spring.datasource.url=jdbc:postgresql://main-service-db:5432/postgres
      - app.client.user=http://user-service:8080
      - KAFKA_BROKERS=kafka-broker-0:9091
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  main-service-db:
    image: postgres:alpine
    logging: *logging
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./mainservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      <<: *healthcheck

  audit-service:
    build: ./auditservice
    logging: *logging
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
      zipkin:
        condition: service_healthy
      logstash:
        condition: service_healthy
      kibana:
        condition: service_healthy
      kafdrop:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    ports:
      - "8084:8080"
    environment:
      - spring.data.mongodb.uri=mongodb://audit-service-db:27017/db
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
      - spring.data.mongodb.host=audit-service-db
      - spring.data.mongodb.port=27017
      - KAFKA_BROKERS=kafka-broker-0:9091
      - ELASTIC_PATH=elasticsearch:9200
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  frontend-service:
    build: ./frontendservice
    logging: *logging
    ports:
      - "8085:8080"
    environment:
      - KAFKA_BROKERS=kafka-broker-0:9091
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  websocket-service:
    build: ./websocketservice
    logging: *logging
    depends_on:
      audit-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      kafka-broker-0:
        condition: service_healthy
      websocket-service-rabbitmq:
        condition: service_healthy
    ports:
      - "8086:8080"
    environment:
      - spring.rabbitmq.host=websocket-service-rabbitmq
      - app.client.user=http://user-service:8080
      - app.client.main=http://main-service:8080
      - KAFKA_BROKERS=kafka-broker-0:9091
      - management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:8080/actuator/health || exit 1"
      <<: *healthcheck

  websocket-service-rabbitmq:
    build:
      dockerfile: ./rabbit.Dockerfile
    logging: *logging
    ports:
      - "5672:5672"
      - "61613:61613"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      <<: *healthcheck

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    logging: *logging
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: "nc -z 127.0.0.1 2181 || exit 1"
      <<: *healthcheck

  kafka-broker-0:
    image: confluentinc/cp-kafka:7.4.4
    logging: *logging
    depends_on:
      kafka-zookeeper:
        condition: service_healthy
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTER:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTER://kafka-broker-0:9090,PLAINTEXT_HOST1://kafka-broker-0:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: "nc -z 127.0.0.1 9091 || exit 1"
      <<: *healthcheck

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.1
    logging: *logging
    restart: always
    depends_on:
      - kafka-broker-0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka-broker-0:9090"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:9000 || exit 1"
      <<: *healthcheck

  prometheus:
    image: prom/prometheus:v2.53.0
    logging: *logging

    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9089:9090"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:9090 || exit 1"
      <<: *healthcheck

  zipkin:
    image: openzipkin/zipkin:3.4
    logging: *logging
    restart: always
    ports:
      - "9411:9411"
    healthcheck:
      test: "wget --no-verbose --tries=1 --spider 127.0.0.1:9411 || exit 1"
      <<: *healthcheck

  grafana:
    image: grafana/grafana:10.4.4
    logging: *logging
    restart: always
    ports:
      - "3000:3000"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:3000 || exit 1"
      <<: *healthcheck

  logstash:
    image: logstash:8.14.1
    volumes:
      - ./logstash.conf:/etc/logstash/logstash.conf
    command: logstash -f /etc/logstash/logstash.conf
    restart: always
    ports:
      - "12201:12201/udp"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:9600 || exit 1"
      <<: *healthcheck

  elasticsearch:
    image: elasticsearch:8.14.1
    logging: *logging
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:9200 || exit 1"
      <<: *healthcheck

  kibana:
    image: kibana:8.14.1
    logging: *logging
    restart: always
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    healthcheck:
      test: "curl --location --output /dev/null --head --silent --fail 127.0.0.1:5601 || exit 1"
      <<: *healthcheck