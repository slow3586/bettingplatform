name: betting_platform
services:
  user_service:
    build: ./userservice
    depends_on:
      kafka_broker_0:
        condition: service_healthy
      user_service_db:
        condition: service_healthy
    environment:
      - spring.datasource.url=jdbc:postgresql://user_service_db:5432/postgres
    ports:
      - "8081:8080"
      - "5006:5005"
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  user_service_db:
    image: postgres:alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./userservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3

  betting_service:
    build: ./bettingservice
    depends_on:
      kafka_broker_0:
        condition: service_healthy
      betting_service_db:
        condition: service_healthy
    ports:
      - "8082:8080"
      - "5007:5005"
    environment:
      - spring.datasource.url=jdbc:postgresql://betting_service_db:5432/postgres
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  betting_service_db:
    image: postgres:alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./bettingservice/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5435:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 3

  frontend_service:
    build: ./frontendservice
    ports:
      - "8083:8080"
      - "5008:5005"
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  websocket_service:
    build: ./websocketservice
    depends_on:
      user_service:
        condition: service_healthy
      kafka_broker_0:
        condition: service_healthy
      websocket_service_rabbitmq:
        condition: service_healthy
    ports:
      - "8084:8080"
      - "5009:5005"
    environment:
      - spring.rabbitmq.host=websocket_service_rabbitmq
      - app.kafka.broker=kafka_broker_0:9091
      - app.bet-service-url=betting_service:8080
      - app.user-service-url=user_service:8080
    healthcheck:
      test: "curl --fail --silent 127.0.0.1:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 20

  websocket_service_rabbitmq:
    build:
      dockerfile: ./rabbit.Dockerfile
    ports:
      - "5672:5672"
      - "61613:61613"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 2s
      timeout: 2s
      retries: 20

  kafka_zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka_broker_0:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - kafka_zookeeper
    ports:
      - "9090:9090"
      - "9091:9091"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka_zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTER:PLAINTEXT,PLAINTEXT_HOST1:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTER://kafka_broker_0:9090,PLAINTEXT_HOST1://kafka_broker_0:9091
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: nc -z 127.0.0.1 9091 || exit -1
      interval: 2s
      timeout: 2s
      retries: 20

  kafka_kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka_broker_0
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka_broker_0:9090"

  audit_prometheus:
    image: prom/prometheus
    ports:
      - "19090:9090"

  audit_grafana:
    image: grafana/grafana
    depends_on:
      - audit_prometheus
    ports:
      - "3000:3000"